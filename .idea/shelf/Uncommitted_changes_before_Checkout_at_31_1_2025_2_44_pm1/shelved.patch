Index: ip/src/main/java/Gigi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Gigi {\r\n    private static final String FILE_PATH = \"./data/Gigi.txt\";\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        ArrayList<Task> input = loadTasksFromFile();\r\n        String line = \"____________________________________________________________ \\n\";\r\n        String logo = \"\\n\" +\r\n                \"⠀ ／|_     \\n\" +\r\n                \"（ﾟ､ ｡ 7\\n\" +\r\n                \"⠀ |、ﾞ~ヽ\\n\" +\r\n                \"  じしf_, )ノ \\n\";\r\n\r\n        System.out.println(line);\r\n        System.out.println(\r\n                \"MEOW! \\n\"\r\n                        + \"I'm Gigi, the mighty demon keeping this place running. \\n\"\r\n                        + \"What do you want? \\n\");\r\n        System.out.println(line);\r\n\r\n        while (sc.hasNextLine()) {\r\n            String command = sc.nextLine();\r\n            System.out.println(line);\r\n            try {\r\n                command = command.toLowerCase();\r\n                String[] splitCommand = command.split(\"\\\\s+\", 2);\r\n                String action = splitCommand[0];\r\n                String details = splitCommand.length > 1 ? splitCommand[1] : \"\";\r\n\r\n                switch(action) {\r\n\r\n                    case \"bye\" -> {\r\n                        saveTasksToFile(input);\r\n                        System.out.println(\r\n                                \"See ya! \\n\" +\r\n                                        \"Don't forget - this mighty fiery feline doesn't wait forever. \\n\" +\r\n                                        \"Meow!\");\r\n                        break;\r\n                    }\r\n                    case \"list\" -> {\r\n                        if (input.isEmpty()) {\r\n                            throw new DukeException(\"MEOW!!! You have nothing on your list.\");\r\n                        }\r\n                        System.out.println(\"Don't forget what you have to do:\");\r\n                        for (int i = 0; i < input.size(); i++) {\r\n                            if (input.get(i) != null) {\r\n                                System.out.println((i + 1) + \". \" + input.get(i).toString());\r\n                            }\r\n                        }\r\n                    }\r\n                    case \"mark\" -> {\r\n                        String[] splitDescription = details.split(\"\\\\s+\");\r\n                        int index = Integer.parseInt(splitDescription[0]) - 1;\r\n                        if (index + 1 > input.size()) {\r\n                            throw new DukeException(\"MEOW! You don't have that many tasks\");\r\n                        }\r\n                        System.out.println(\"Nice! I've marked this task as done:\\n\");\r\n                        input.get(index).markDone(index);\r\n                        System.out.println(input.get(index).toString());\r\n                    }\r\n\r\n                    case \"unmark\" -> {\r\n                        String[] splitDescription = details.split(\"\\\\s+\");\r\n                        int index = Integer.parseInt(splitDescription[0]) - 1;\r\n                        if (index + 1 > input.size()) {\r\n                            throw new DukeException(\"MEOW! You don't have that many tasks\");\r\n                        }\r\n                        System.out.println(\"Meow, I've marked this task as not done yet:\\n\");\r\n                        input.get(index).markUndone(index);\r\n                        System.out.println(input.get(index).toString());\r\n                    }\r\n\r\n                    case \"delete\" -> {\r\n                        String[] splitDescription = details.split(\"\\\\s+\");\r\n                        int index = Integer.parseInt(splitDescription[0]) - 1;\r\n                        if (index + 1 > input.size()) {\r\n                            throw new DukeException(\"MEOW! You don't have that many tasks\");\r\n                        }\r\n                        System.out.println(\"MEOW. This task never existed: \\n\");\r\n                        System.out.println(input.get(index).toString());\r\n                        input.remove(index);\r\n                        System.out.println(\"You have \" + input.size() + \" tasks to do.\");\r\n                    }\r\n\r\n                    case \"todo\" -> {\r\n                        if (details.isBlank()) {\r\n                            throw new DukeException(\"Where is your todo?\");\r\n                        }\r\n                        ToDos itemT = new ToDos(details);\r\n                        System.out.println(\"Meow! I've pawed this task into the list - don't make me scratch it out later. \\n\");\r\n                        System.out.println(itemT.toString());\r\n                        input.add(itemT);\r\n                        System.out.printf(\"\\nRemember now, you have %d task(s) to do.%n\", input.size());\r\n                    }\r\n\r\n                    case \"deadline\" -> {\r\n                        if (details.isBlank()) {\r\n                            throw new DukeException(\"Where is your deadline?\");\r\n                        }\r\n                        if (!command.contains(\" /by \")) {\r\n                            throw new DukeException(\"MEOW!!! The deadline must include a '/by' clause.\");\r\n                        }\r\n                        String[] deadlineDetails = details.split(\" /by \");\r\n                        if (deadlineDetails.length < 2 || deadlineDetails[0].isBlank() || deadlineDetails[1].isBlank()) {\r\n                            throw new DukeException(\"MEOW!!! The description and date of a deadline cannot be empty.\");\r\n                        }\r\n                        String deadlineTask = deadlineDetails[0];\r\n                        String date = deadlineDetails[1];\r\n                        System.out.println(\"Meow! I've pawed this task into the list - don't make me scratch it out later.\");\r\n                        Deadlines itemD = new Deadlines(deadlineTask, date);\r\n                        System.out.println(itemD.toString());\r\n                        input.add(itemD);\r\n                        System.out.printf(\"Remember now, you have %d task(s) to do.%n\", input.size());\r\n                    }\r\n                    case \"event\" -> {\r\n                        if (details.isBlank()) {\r\n                            throw new DukeException(\"Where is your event?\");\r\n                        }\r\n                        if (!details.contains(\" /from \") || !details.contains(\" /to \")) {\r\n                            throw new DukeException(\"MEOW!!! The event must include '/from' and '/to' clauses.\");\r\n                        }\r\n                        String[] eventDetails = details.split(\" /from | /to \");\r\n                        if (eventDetails.length < 3 | Arrays.stream(eventDetails).anyMatch(String::isBlank)) {\r\n                            throw new DukeException(\"MEOW!!! The description, start time, and end time of an event cannot be empty.\");\r\n                        }\r\n                        System.out.println(\"Meow! I've pawed this task into the list - don't make me scratch it out later.\");\r\n                        String taskName = eventDetails[0];\r\n                        String from = eventDetails[1];\r\n                        String to = eventDetails[2];\r\n                        Events itemE = new Events(taskName, from, to);\r\n                        System.out.println(itemE.toString());\r\n                        input.add(itemE);\r\n                        System.out.printf(\"Remember now, you have %d task(s) to do.%n\", input.size());\r\n                    }\r\n                    default -> {\r\n                        throw new DukeException(\"I've got no clue what that means - care to explain?\");\r\n                    }\r\n                }\r\n            } catch (DukeException e) {\r\n                System.out.println(e.getMessage());\r\n\r\n            }\r\n            System.out.println(line);\r\n        }\r\n    }\r\n\r\n    private static void saveTasksToFile(ArrayList<Task> input) {\r\n        try {\r\n            PrintWriter pw = new PrintWriter(FILE_PATH);\r\n            for (Task task : input) {\r\n                pw.println(task.convertToText());\r\n            }\r\n            pw.close();\r\n\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"MEOW! Unable to save tasks to file: \\n\" +\r\n                    e.getMessage());\r\n        }\r\n    }\r\n\r\n    private static ArrayList<Task> loadTasksFromFile() {\r\n        ArrayList<Task> input = new ArrayList<>();\r\n        File file = new File(FILE_PATH);\r\n        if (!file.exists()) {\r\n            return input;\r\n        }\r\n        try (Scanner sc = new Scanner(file)) {\r\n            while (sc.hasNextLine()) {\r\n                String line = sc.nextLine();\r\n                if (line.isBlank()) {\r\n                    continue;\r\n                }\r\n                String[] info = line.split(\" \\\\| \");\r\n                String taskType = info[0];\r\n                boolean isDone = Boolean.parseBoolean(info[1]);\r\n                switch (taskType) {\r\n                    case \"T\" -> input.add(new ToDos(info[2], isDone));\r\n                    case \"D\" -> input.add(new Deadlines(info[2], info[3], isDone));\r\n                    case \"E\" -> input.add(new Events(info[2], info[3], info[4], isDone));\r\n                }\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            System.out.println(\"MEOW! Unable to load tasks from file: \\n\" +\r\n                    e.getMessage());\r\n        }\r\n        System.out.println(\"MEOW! Tasks loaded from file.\");\r\n        return input;\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ip/src/main/java/Gigi.java b/ip/src/main/java/Gigi.java
--- a/ip/src/main/java/Gigi.java	(revision 82cb1f1042b315a9da3f85d161b04eb1d5aa39b2)
+++ b/ip/src/main/java/Gigi.java	(date 1738305608301)
@@ -2,16 +2,26 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.time.LocalDate;
+import java.time.format.DateTimeParseException;
 import java.util.Arrays;
 import java.util.ArrayList;
 import java.util.Scanner;
+import java.time.LocalDateTime;
 
 public class Gigi {
-    private static final String FILE_PATH = "./data/Gigi.txt";
+    private static final String FILE_PATH = "./data/gigi.txt";
+    public enum actions {
+        BYE, LIST, MARK, UNMARK, DELETE,
+        TODO, DEADLINE, EVENT
+    }
 
     public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
         ArrayList<Task> input = loadTasksFromFile();
+        if (input.isEmpty()) {
+            System.out.println("MEOW! No tasks found in file.");
+        }
         String line = "____________________________________________________________ \n";
         String logo = "\n" +
                 "⠀ ／|_     \n" +
@@ -30,22 +40,25 @@
             String command = sc.nextLine();
             System.out.println(line);
             try {
-                command = command.toLowerCase();
                 String[] splitCommand = command.split("\\s+", 2);
-                String action = splitCommand[0];
+                String actionString = splitCommand[0].toUpperCase();
                 String details = splitCommand.length > 1 ? splitCommand[1] : "";
 
+                actions action;
+                try {
+                    action = actions.valueOf(actionString);
+                } catch (IllegalArgumentException e) {
+                    throw new DukeException("I've got no clue what that means - care to explain?");
+                }
                 switch(action) {
-
-                    case "bye" -> {
+                    case BYE -> {
                         saveTasksToFile(input);
                         System.out.println(
                                 "See ya! \n" +
                                         "Don't forget - this mighty fiery feline doesn't wait forever. \n" +
                                         "Meow!");
-                        break;
                     }
-                    case "list" -> {
+                    case LIST -> {
                         if (input.isEmpty()) {
                             throw new DukeException("MEOW!!! You have nothing on your list.");
                         }
@@ -56,113 +69,152 @@
                             }
                         }
                     }
-                    case "mark" -> {
-                        String[] splitDescription = details.split("\\s+");
-                        int index = Integer.parseInt(splitDescription[0]) - 1;
-                        if (index + 1 > input.size()) {
-                            throw new DukeException("MEOW! You don't have that many tasks");
-                        }
-                        System.out.println("Nice! I've marked this task as done:\n");
-                        input.get(index).markDone(index);
-                        System.out.println(input.get(index).toString());
-                    }
+                    case MARK -> handleMark(details, input);
+                    case UNMARK -> handleUnmark(details, input);
+                    case DELETE -> handleDelete(details, input);
+                    case TODO -> handleToDo(details, input);
+                    case DEADLINE -> handleDeadline(details, input);
+                    case EVENT -> handleEvent(details, input);
+                }
+            } catch (DukeException e) {
+                System.out.println(e.getMessage());
+
+            }
+            System.out.println(line);
+        }
+    }
+
+    private static void handleMark(String details,
+                                   ArrayList<Task> input) throws DukeException {
+        String[] splitDescription = details.split("\\s+");
+        int index = Integer.parseInt(splitDescription[0]) - 1;
+        if (index + 1 > input.size()) {
+            throw new DukeException("MEOW! You don't have that many tasks");
+        }
+        System.out.println("Nice! I've marked this task as done:\n");
+        input.get(index).markDone(index);
+        System.out.println(input.get(index).toString());
+    }
 
-                    case "unmark" -> {
-                        String[] splitDescription = details.split("\\s+");
-                        int index = Integer.parseInt(splitDescription[0]) - 1;
-                        if (index + 1 > input.size()) {
-                            throw new DukeException("MEOW! You don't have that many tasks");
-                        }
-                        System.out.println("Meow, I've marked this task as not done yet:\n");
-                        input.get(index).markUndone(index);
-                        System.out.println(input.get(index).toString());
-                    }
+    private static void handleUnmark(String details,
+                                   ArrayList<Task> input) throws DukeException {
+        String[] splitDescription = details.split("\\s+");
+        int index = Integer.parseInt(splitDescription[0]) - 1;
+        if (index + 1 > input.size()) {
+            throw new DukeException("MEOW! You don't have that many tasks");
+        }
+        System.out.println("Meow, I've marked this task as not done yet:\n");
+        input.get(index).markUndone(index);
+        System.out.println(input.get(index).toString());
+    }
 
-                    case "delete" -> {
-                        String[] splitDescription = details.split("\\s+");
-                        int index = Integer.parseInt(splitDescription[0]) - 1;
-                        if (index + 1 > input.size()) {
-                            throw new DukeException("MEOW! You don't have that many tasks");
-                        }
-                        System.out.println("MEOW. This task never existed: \n");
-                        System.out.println(input.get(index).toString());
-                        input.remove(index);
-                        System.out.println("You have " + input.size() + " tasks to do.");
-                    }
+    private static void handleDelete(String details,
+                                     ArrayList<Task> input) throws DukeException {
+        String[] splitDescription = details.split("\\s+");
+        int index = Integer.parseInt(splitDescription[0]) - 1;
+        if (index + 1 > input.size()) {
+            throw new DukeException("MEOW! You don't have that many tasks");
+        }
+        System.out.println("MEOW. This task never existed: \n");
+        System.out.println(input.get(index).toString());
+        input.remove(index);
+        System.out.println("You have " + input.size() + " tasks to do.");
+    }
 
-                    case "todo" -> {
-                        if (details.isBlank()) {
-                            throw new DukeException("Where is your todo?");
-                        }
-                        ToDos itemT = new ToDos(details);
-                        System.out.println("Meow! I've pawed this task into the list - don't make me scratch it out later. \n");
-                        System.out.println(itemT.toString());
-                        input.add(itemT);
-                        System.out.printf("\nRemember now, you have %d task(s) to do.%n", input.size());
-                    }
+    private static void handleToDo(String details,
+                                   ArrayList<Task> input) throws DukeException {
+        if (details.isBlank()) {
+            throw new DukeException("Where is your todo?");
+        }
+        ToDos itemT = new ToDos(details);
+        System.out.println("Meow! I've pawed this task into the list - don't make me scratch it out later. \n");
+        System.out.println(itemT.toString());
+        input.add(itemT);
+        System.out.printf("\nRemember now, you have %d task(s) to do.%n", input.size());
+    }
 
-                    case "deadline" -> {
-                        if (details.isBlank()) {
-                            throw new DukeException("Where is your deadline?");
-                        }
-                        if (!command.contains(" /by ")) {
-                            throw new DukeException("MEOW!!! The deadline must include a '/by' clause.");
-                        }
-                        String[] deadlineDetails = details.split(" /by ");
-                        if (deadlineDetails.length < 2 || deadlineDetails[0].isBlank() || deadlineDetails[1].isBlank()) {
-                            throw new DukeException("MEOW!!! The description and date of a deadline cannot be empty.");
-                        }
-                        String deadlineTask = deadlineDetails[0];
-                        String date = deadlineDetails[1];
-                        System.out.println("Meow! I've pawed this task into the list - don't make me scratch it out later.");
-                        Deadlines itemD = new Deadlines(deadlineTask, date);
-                        System.out.println(itemD.toString());
-                        input.add(itemD);
-                        System.out.printf("Remember now, you have %d task(s) to do.%n", input.size());
-                    }
-                    case "event" -> {
-                        if (details.isBlank()) {
-                            throw new DukeException("Where is your event?");
-                        }
-                        if (!details.contains(" /from ") || !details.contains(" /to ")) {
-                            throw new DukeException("MEOW!!! The event must include '/from' and '/to' clauses.");
-                        }
-                        String[] eventDetails = details.split(" /from | /to ");
-                        if (eventDetails.length < 3 | Arrays.stream(eventDetails).anyMatch(String::isBlank)) {
-                            throw new DukeException("MEOW!!! The description, start time, and end time of an event cannot be empty.");
-                        }
-                        System.out.println("Meow! I've pawed this task into the list - don't make me scratch it out later.");
-                        String taskName = eventDetails[0];
-                        String from = eventDetails[1];
-                        String to = eventDetails[2];
-                        Events itemE = new Events(taskName, from, to);
-                        System.out.println(itemE.toString());
-                        input.add(itemE);
-                        System.out.printf("Remember now, you have %d task(s) to do.%n", input.size());
-                    }
-                    default -> {
-                        throw new DukeException("I've got no clue what that means - care to explain?");
-                    }
-                }
-            } catch (DukeException e) {
-                System.out.println(e.getMessage());
-
-            }
-            System.out.println(line);
-        }
+    private static void handleDeadline(String details,
+                                       ArrayList<Task> input) throws DukeException {
+        if (details.isBlank()) {
+            throw new DukeException("Where is your deadline?");
+        }
+        if (!details.contains(" /by ")) {
+            throw new DukeException("MEOW!!! The deadline must include a '/by' clause.");
+        }
+        String[] deadlineDetails = details.split(" /by ");
+        if (deadlineDetails.length < 2 || deadlineDetails[0].isBlank() || deadlineDetails[1].isBlank()) {
+            throw new DukeException("MEOW!!! The description and date of a deadline cannot be empty.");
+        }
+        String deadlineTask = deadlineDetails[0];
+        String date = deadlineDetails[1];
+        LocalDate dateDeadline;
+        try {
+            dateDeadline = LocalDate.parse(date);
+        } catch (DateTimeParseException e) {
+            throw new DukeException("MEOW! Must be in format DD/MM/YYYY");
+        }
+        System.out.println("Meow! I've pawed this task into the list - don't make me scratch it out later.");
+        Deadlines itemD = new Deadlines(deadlineTask, dateDeadline);
+        System.out.println(itemD.toString());
+        input.add(itemD);
+        System.out.printf("Remember now, you have %d task(s) to do.%n", input.size());
+    }
+
+    private static void handleEvent(String details,
+                                   ArrayList<Task> input) throws DukeException {
+        if (details.isBlank()) {
+            throw new DukeException("Where is your event?");
+        }
+        if (!details.contains(" /from ") || !details.contains(" /to ")) {
+            throw new DukeException("MEOW!!! The event must include '/from' and '/to' clauses.");
+        }
+        String[] eventDetails = details.split(" /from | /to ");
+        if (eventDetails.length < 3 | Arrays.stream(eventDetails).anyMatch(String::isBlank)) {
+            throw new DukeException("MEOW!!! The description, start time, and end time of an event cannot be empty.");
+        }
+        System.out.println("Meow! I've pawed this task into the list - don't make me scratch it out later.");
+        String taskName = eventDetails[0];
+        String from = eventDetails[1];
+        String to = eventDetails[2];
+        LocalDate dateFrom;
+        LocalDate dateTo;
+        try {
+            dateFrom = LocalDate.parse(from);
+            dateTo = LocalDate.parse(to);
+        } catch (DateTimeParseException e) {
+            throw new DukeException("MEOW! Must be in format MM/DD/YYYY");
+        }
+        Events itemE = new Events(taskName, dateFrom, dateTo);
+        System.out.println(itemE.toString());
+        input.add(itemE);
+        System.out.printf("Remember now, you have %d task(s) to do.%n", input.size());
     }
 
     private static void saveTasksToFile(ArrayList<Task> input) {
         try {
+            File directory = new File("./data");
+            if (!directory.exists() && !directory.mkdir()) {
+                System.out.println("MEOW! Unable to create the data directory.");
+                return;
+            }
+            File file = new File(FILE_PATH);
+            if (!file.exists() && !file.createNewFile()) {
+                System.out.println("MEOW! Unable to create the save file.");
+                return;
+            }
+
             PrintWriter pw = new PrintWriter(FILE_PATH);
             for (Task task : input) {
                 pw.println(task.convertToText());
             }
             pw.close();
+            System.out.println("MEOW! Tasks saved to file.");
 
         } catch (FileNotFoundException e) {
-            System.out.println("MEOW! Unable to save tasks to file: \n" +
+            System.out.println("MEOW! File not found: \n" +
                     e.getMessage());
+        } catch (IOException e) {
+            System.out.println("MEOW! Unable to save tasks to file: \n" + e.getMessage());
         }
     }
 
@@ -181,18 +233,33 @@
                 String[] info = line.split(" \\| ");
                 String taskType = info[0];
                 boolean isDone = Boolean.parseBoolean(info[1]);
-                switch (taskType) {
-                    case "T" -> input.add(new ToDos(info[2], isDone));
-                    case "D" -> input.add(new Deadlines(info[2], info[3], isDone));
-                    case "E" -> input.add(new Events(info[2], info[3], info[4], isDone));
+                try {
+                    switch (taskType) {
+                        case "T" -> input.add(new ToDos(info[2], isDone));
+                        case "D" -> {
+                            LocalDate deadlineDate = LocalDate.parse(info[3]);
+                            input.add(new Deadlines(info[2], deadlineDate, isDone));
+                        }
+                        case "E" -> {
+                            LocalDate fromDate = LocalDate.parse(info[3]);
+                            LocalDate toDate = LocalDate.parse(info[4]);
+                            input.add(new Events(info[2], fromDate, toDate, isDone));
+                        }
+                        default -> System.out.println("MEOW! Unknown task type: " + taskType);
+                    }
+                } catch (Exception e) {
+                    System.out.println("MEOW! Error parsing task: " + line);
                 }
             }
+            System.out.println("MEOW! Tasks loaded from file.");
+            System.out.println(input.toString());
+            return input;
         } catch (FileNotFoundException e) {
             System.out.println("MEOW! Unable to load tasks from file: \n" +
                     e.getMessage());
         }
-        System.out.println("MEOW! Tasks loaded from file.");
         return input;
 
+
     }
 }
Index: ip/src/main/java/ToDos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class ToDos extends Task{\r\n    protected String taskName;\r\n    protected boolean isComplete;\r\n\r\n    public ToDos(String taskName) {\r\n        super(taskName);\r\n        this.isComplete = false;\r\n    }\r\n\r\n    public ToDos(String taskName, boolean isComplete) {\r\n        super(taskName);\r\n        this.isComplete = isComplete;\r\n    }\r\n\r\n    public String getStatusIcon() {\r\n        return \"[T]\" + super.getStatusIcon(); // mark done task with X\r\n    }\r\n\r\n    void markDone(int index) {\r\n        super.markDone(index);\r\n    }\r\n\r\n    void markUndone(int index) {\r\n        super.markUndone(index);\r\n    }\r\n\r\n    public String toString() {\r\n        return super.toString();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ip/src/main/java/ToDos.java b/ip/src/main/java/ToDos.java
--- a/ip/src/main/java/ToDos.java	(revision 82cb1f1042b315a9da3f85d161b04eb1d5aa39b2)
+++ b/ip/src/main/java/ToDos.java	(date 1738305531047)
@@ -1,3 +1,5 @@
+import java.time.format.DateTimeFormatter;
+
 public class ToDos extends Task{
     protected String taskName;
     protected boolean isComplete;
@@ -13,10 +15,12 @@
     }
 
     public String getStatusIcon() {
+
         return "[T]" + super.getStatusIcon(); // mark done task with X
     }
 
     void markDone(int index) {
+
         super.markDone(index);
     }
 
@@ -24,6 +28,10 @@
         super.markUndone(index);
     }
 
+    public String convertToText() {
+        return "T | " + super.convertToText();
+    }
+
     public String toString() {
         return super.toString();
     }
Index: ip/src/main/java/Deadlines.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Deadlines extends Task{\r\n    protected String taskName;\r\n    protected boolean isComplete;\r\n    protected String deadline;\r\n\r\n    public Deadlines(String taskName, String deadline) {\r\n        super(taskName);\r\n        this.deadline = deadline;\r\n        this.isComplete = false;\r\n    }\r\n\r\n    public Deadlines(String taskName, String deadline, boolean isComplete) {\r\n        super(taskName);\r\n        this.deadline = deadline;\r\n        this.isComplete = isComplete;\r\n    }\r\n\r\n    public String getStatusIcon() {\r\n        return \"[D]\" + super.getStatusIcon(); // mark done task with X\r\n    }\r\n\r\n    void markDone(int index) {\r\n        super.markDone(index);\r\n    }\r\n\r\n    void markUndone(int index) {\r\n        super.markUndone(index);\r\n    }\r\n\r\n    public String convertToText() {\r\n        return \"D | \" + super.convertToText() + \" | \" + this.deadline;\r\n    }\r\n\r\n    public String toString() {\r\n        return super.toString() + \" (by: \" + deadline + \")\";\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ip/src/main/java/Deadlines.java b/ip/src/main/java/Deadlines.java
--- a/ip/src/main/java/Deadlines.java	(revision 82cb1f1042b315a9da3f85d161b04eb1d5aa39b2)
+++ b/ip/src/main/java/Deadlines.java	(date 1738294960571)
@@ -1,38 +1,47 @@
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
 public class Deadlines extends Task{
     protected String taskName;
     protected boolean isComplete;
-    protected String deadline;
+    protected LocalDate deadline;
 
-    public Deadlines(String taskName, String deadline) {
+    public Deadlines(String taskName, LocalDate deadline) {
         super(taskName);
         this.deadline = deadline;
         this.isComplete = false;
     }
 
-    public Deadlines(String taskName, String deadline, boolean isComplete) {
+    public Deadlines(String taskName, LocalDate deadline, boolean isComplete) {
         super(taskName);
         this.deadline = deadline;
         this.isComplete = isComplete;
     }
 
     public String getStatusIcon() {
+
         return "[D]" + super.getStatusIcon(); // mark done task with X
     }
 
     void markDone(int index) {
+
         super.markDone(index);
     }
 
     void markUndone(int index) {
+
         super.markUndone(index);
     }
 
     public String convertToText() {
-        return "D | " + super.convertToText() + " | " + this.deadline;
+
+        return "D | " + super.convertToText() + " | " + this.deadline.format(DateTimeFormatter.ofPattern("MMM d yyyy"));
     }
 
     public String toString() {
-        return super.toString() + " (by: " + deadline + ")";
+
+        return super.toString() + " (by: " + deadline.toString() + ")";
     }
 }
 
Index: ip/text-ui-test/ACTUAL.TXT
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>____________________________________________________________ \r\n\r\nMEOW! \r\nI'm Gigi, the mighty demon keeping this place running. \r\nWhat do you want? \r\n\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMeow! I've pawed this task into the list - don't make me scratch it out later. \r\n\r\n[T][ ] read book\r\n\r\nRemember now, you have 1 task(s) to do.\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nWhere is your todo?\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMeow! I've pawed this task into the list - don't make me scratch it out later.\r\n[D][ ] submit assignment (by: friday)\r\nRemember now, you have 2 task(s) to do.\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMEOW!!! The deadline must include a '/by' clause.\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMeow! I've pawed this task into the list - don't make me scratch it out later.\r\n[E][ ] team meeting (from: monday 2pm to: 3pm)\r\nRemember now, you have 3 task(s) to do.\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMEOW!!! The event must include '/from' and '/to' clauses.\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nDon't forget what you have to do:\r\n1. [T][ ] read book\r\n2. [D][ ] submit assignment (by: friday)\r\n3. [E][ ] team meeting (from: monday 2pm to: 3pm)\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nNice! I've marked this task as done:\r\n\r\n[T][X] read book\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMeow, I've marked this task as not done yet:\r\n\r\n[T][ ] read book\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMEOW. This task never existed: \r\n\r\n[D][ ] submit assignment (by: friday)\r\nYou have 2 tasks to do.\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMEOW! You don't have that many tasks\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nI've got no clue what that means - care to explain?\r\n____________________________________________________________ \r\n\r\n____________________________________________________________ \r\n\r\nMEOW! Unable to save tasks to file: \r\n.\\data\\Gigi.txt (The system cannot find the path specified)\r\nSee ya! \r\nDon't forget - this mighty fiery feline doesn't wait forever. \r\nMeow!\r\n____________________________________________________________ \r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ip/text-ui-test/ACTUAL.TXT b/ip/text-ui-test/ACTUAL.TXT
--- a/ip/text-ui-test/ACTUAL.TXT	(revision 82cb1f1042b315a9da3f85d161b04eb1d5aa39b2)
+++ b/ip/text-ui-test/ACTUAL.TXT	(date 1738295792754)
@@ -22,9 +22,7 @@
 
 ____________________________________________________________ 
 
-Meow! I've pawed this task into the list - don't make me scratch it out later.
-[D][ ] submit assignment (by: friday)
-Remember now, you have 2 task(s) to do.
+MEOW! Must be in format MM/DD/YYYY
 ____________________________________________________________ 
 
 ____________________________________________________________ 
@@ -35,8 +33,7 @@
 ____________________________________________________________ 
 
 Meow! I've pawed this task into the list - don't make me scratch it out later.
-[E][ ] team meeting (from: monday 2pm to: 3pm)
-Remember now, you have 3 task(s) to do.
+MEOW! Must be in format MM/DD/YYYY
 ____________________________________________________________ 
 
 ____________________________________________________________ 
@@ -48,8 +45,6 @@
 
 Don't forget what you have to do:
 1. [T][ ] read book
-2. [D][ ] submit assignment (by: friday)
-3. [E][ ] team meeting (from: monday 2pm to: 3pm)
 ____________________________________________________________ 
 
 ____________________________________________________________ 
@@ -68,10 +63,7 @@
 
 ____________________________________________________________ 
 
-MEOW. This task never existed: 
-
-[D][ ] submit assignment (by: friday)
-You have 2 tasks to do.
+MEOW! You don't have that many tasks
 ____________________________________________________________ 
 
 ____________________________________________________________ 
@@ -91,5 +83,3 @@
 See ya! 
 Don't forget - this mighty fiery feline doesn't wait forever. 
 Meow!
-____________________________________________________________ 
-
